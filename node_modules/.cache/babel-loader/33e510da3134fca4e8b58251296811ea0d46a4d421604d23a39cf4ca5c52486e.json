{"ast":null,"code":"var _jsxFileName = \"C:\\\\portfolio\\\\presentation\\\\src\\\\contexts\\\\ColorModeContext\\\\index.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useMemo, useState } from \"react\";\nimport { createTheme, ThemeProvider, useMediaQuery } from \"@mui/material\";\nimport { getDesignTokens } from \"./palettes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorModeContext = /*#__PURE__*/createContext({\n  toggleColorMode: () => {}\n});\nexport const useColorMode = () => {\n  _s();\n  const contextValue = useContext(ColorModeContext);\n  if (!contextValue) {\n    throw new Error('\"useColorMode\" must be called from within a Provider.');\n  }\n  return contextValue;\n};\n_s(useColorMode, \"LIxFXvZbUdXE/TWxKLLXMjM3Mig=\");\nexport const ColorModeProvider = ({\n  children\n}) => {\n  _s2();\n  const colorModePreference = useMediaQuery('(prefers-color-scheme: light)');\n  const [mode, setMode] = useState('light');\n  const colorMode = useMemo(() => ({\n    toggleColorMode: () => {\n      setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n    }\n  }), []);\n  const selectedTheme = useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\n  return /*#__PURE__*/_jsxDEV(ColorModeContext.Provider, {\n    value: colorMode,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: selectedTheme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n};\n_s2(ColorModeProvider, \"YZ0z/xYY/I+5ji7BlIJrdIlrfK8=\", false, function () {\n  return [useMediaQuery];\n});\n_c = ColorModeProvider;\nvar _c;\n$RefreshReg$(_c, \"ColorModeProvider\");","map":{"version":3,"names":["createContext","useContext","useMemo","useState","createTheme","ThemeProvider","useMediaQuery","getDesignTokens","jsxDEV","_jsxDEV","ColorModeContext","toggleColorMode","useColorMode","_s","contextValue","Error","ColorModeProvider","children","_s2","colorModePreference","mode","setMode","colorMode","prevMode","selectedTheme","Provider","value","theme","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/portfolio/presentation/src/contexts/ColorModeContext/index.jsx"],"sourcesContent":["import { createContext, useContext, useMemo, useState } from \"react\";\r\nimport { createTheme, ThemeProvider, useMediaQuery } from \"@mui/material\";\r\nimport { getDesignTokens } from \"./palettes\";\r\n\r\nconst ColorModeContext = createContext({ toggleColorMode: () => { } });\r\n\r\nexport const useColorMode = () => {\r\n   const contextValue = useContext(ColorModeContext);\r\n\r\n   if (!contextValue) {\r\n      throw new Error('\"useColorMode\" must be called from within a Provider.');\r\n   }\r\n\r\n   return contextValue;\r\n};\r\n\r\nexport const ColorModeProvider = ({ children }) => {\r\n   const colorModePreference = useMediaQuery('(prefers-color-scheme: light)');\r\n   const [mode, setMode] = useState('light');\r\n   const colorMode = useMemo(() => ({\r\n      toggleColorMode: () => {\r\n         setMode((prevMode) => prevMode === 'light' ? 'dark' : 'light');\r\n      }\r\n   }), []);\r\n\r\n   const selectedTheme = useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\r\n\r\n   return (\r\n      <ColorModeContext.Provider value={colorMode}>\r\n         <ThemeProvider theme={selectedTheme}>\r\n            {children}\r\n         </ThemeProvider>\r\n      </ColorModeContext.Provider>\r\n   )\r\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpE,SAASC,WAAW,EAAEC,aAAa,EAAEC,aAAa,QAAQ,eAAe;AACzE,SAASC,eAAe,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,gBAAgB,gBAAGV,aAAa,CAAC;EAAEW,eAAe,EAAEA,CAAA,KAAM,CAAE;AAAE,CAAC,CAAC;AAEtE,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,YAAY,GAAGb,UAAU,CAACS,gBAAgB,CAAC;EAEjD,IAAI,CAACI,YAAY,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;EAC3E;EAEA,OAAOD,YAAY;AACtB,CAAC;AAACD,EAAA,CARWD,YAAY;AAUzB,OAAO,MAAMI,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAMC,mBAAmB,GAAGb,aAAa,CAAC,+BAA+B,CAAC;EAC1E,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,OAAO,CAAC;EACzC,MAAMmB,SAAS,GAAGpB,OAAO,CAAC,OAAO;IAC9BS,eAAe,EAAEA,CAAA,KAAM;MACpBU,OAAO,CAAEE,QAAQ,IAAKA,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;IACjE;EACH,CAAC,CAAC,EAAE,EAAE,CAAC;EAEP,MAAMC,aAAa,GAAGtB,OAAO,CAAC,MAAME,WAAW,CAACG,eAAe,CAACa,IAAI,CAAC,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAE/E,oBACGX,OAAA,CAACC,gBAAgB,CAACe,QAAQ;IAACC,KAAK,EAAEJ,SAAU;IAAAL,QAAA,eACzCR,OAAA,CAACJ,aAAa;MAACsB,KAAK,EAAEH,aAAc;MAAAP,QAAA,EAChCA;IAAQ;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAElC,CAAC;AAAAb,GAAA,CAlBYF,iBAAiB;EAAA,QACCV,aAAa;AAAA;AAAA0B,EAAA,GAD/BhB,iBAAiB;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}